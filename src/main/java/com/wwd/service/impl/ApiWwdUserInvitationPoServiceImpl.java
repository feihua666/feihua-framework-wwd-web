package com.wwd.service.impl;

import com.wwd.service.mapper.WwdUserInvitationPoMapper;
import com.wwd.service.modules.wwd.api.ApiWwdUserInvitationPoService;
import com.wwd.service.modules.wwd.dto.WwdUserInvitationDto;
import com.wwd.service.modules.wwd.po.WwdUserInvitationPo;
import feihua.jdbc.api.pojo.BasePo;
import feihua.jdbc.api.pojo.PageAndOrderbyParamDto;
import feihua.jdbc.api.pojo.PageResultDto;
import feihua.jdbc.api.service.impl.ApiBaseServiceImpl;
import org.apache.commons.lang3.RandomStringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;

/**
 * This class was generated by MyBatis Generator.
 * @author yangwei 2018-04-27 09:40:48
 */
@Service
public class ApiWwdUserInvitationPoServiceImpl extends ApiBaseServiceImpl<WwdUserInvitationPo, WwdUserInvitationDto, String> implements ApiWwdUserInvitationPoService {
    @Autowired
    WwdUserInvitationPoMapper wwdUserInvitationPoMapper;

    public ApiWwdUserInvitationPoServiceImpl() {
        super(WwdUserInvitationDto.class);
    }

    @Transactional( propagation = Propagation.SUPPORTS, readOnly = true )
    @Override
    public List<WwdUserInvitationDto> selectByWwdUserId(String wwdUserId) {
        WwdUserInvitationPo wwdUserInvitationPo = new WwdUserInvitationPo();
        wwdUserInvitationPo.setWwdUserId(wwdUserId);
        wwdUserInvitationPo.setDelFlag(BasePo.YesNo.N.name());
        return this.selectList(wwdUserInvitationPo);
    }
    @Transactional( propagation = Propagation.SUPPORTS, readOnly = true )
    @Override
    public List<WwdUserInvitationDto> selectUnUsedByWwdUserId(String wwdUserId) {
        WwdUserInvitationPo wwdUserInvitationPo = new WwdUserInvitationPo();
        wwdUserInvitationPo.setWwdUserId(wwdUserId);
        wwdUserInvitationPo.setIsUsed(BasePo.YesNo.N.name());
        wwdUserInvitationPo.setDelFlag(BasePo.YesNo.N.name());
        return this.selectList(wwdUserInvitationPo);
    }
    @Transactional( propagation = Propagation.SUPPORTS, readOnly = true )
    @Override
    public List<WwdUserInvitationDto> selectUsedByWwdUserId(String wwdUserId) {
        WwdUserInvitationPo wwdUserInvitationPo = new WwdUserInvitationPo();
        wwdUserInvitationPo.setWwdUserId(wwdUserId);
        wwdUserInvitationPo.setIsUsed(BasePo.YesNo.Y.name());
        wwdUserInvitationPo.setDelFlag(BasePo.YesNo.N.name());
        return this.selectList(wwdUserInvitationPo);
    }
    @Transactional( propagation = Propagation.SUPPORTS, readOnly = true )
    @Override
    public PageResultDto<WwdUserInvitationDto> selectUsedByWwdUserId(String wwdUserId, PageAndOrderbyParamDto pageAndOrderbyParamDto) {
        WwdUserInvitationPo wwdUserInvitationPo = new WwdUserInvitationPo();
        wwdUserInvitationPo.setWwdUserId(wwdUserId);
        wwdUserInvitationPo.setIsUsed(BasePo.YesNo.Y.name());
        wwdUserInvitationPo.setDelFlag(BasePo.YesNo.N.name());
        return this.selectList(wwdUserInvitationPo,pageAndOrderbyParamDto);
    }

    @Transactional(rollbackFor = Exception.class,readOnly = false)
    @Override
    public WwdUserInvitationDto generateForWwdUserId(String wwdUserId) {
        String code = RandomStringUtils.random(10,true,true);
        WwdUserInvitationDto invitationDto = selectByCode(code);
        if(invitationDto == null) {
            WwdUserInvitationPo wwdUserInvitationPo = new WwdUserInvitationPo();
            wwdUserInvitationPo.setWwdUserId(wwdUserId);
            wwdUserInvitationPo.setCode(code);
            wwdUserInvitationPo.setIsUsed(BasePo.YesNo.N.name());
            this.preInsert(wwdUserInvitationPo,wwdUserId);
            return this.insertSelective(wwdUserInvitationPo);
        }else {
            return this.generateForWwdUserId(wwdUserId);
        }

    }
    @Transactional( propagation = Propagation.SUPPORTS, readOnly = true )
    @Override
    public WwdUserInvitationDto selectByCode(String invitationCode) {
        WwdUserInvitationPo wwdUserInvitationPo = new WwdUserInvitationPo();
        wwdUserInvitationPo.setCode(invitationCode);
        wwdUserInvitationPo.setDelFlag(BasePo.YesNo.N.name());
        return this.selectOne(wwdUserInvitationPo);
    }

    @Override
    public WwdUserInvitationDto selectUnUsedByCode(String invitationCode) {
        WwdUserInvitationPo wwdUserInvitationPo = new WwdUserInvitationPo();
        wwdUserInvitationPo.setCode(invitationCode);
        wwdUserInvitationPo.setIsUsed(BasePo.YesNo.N.name());
        wwdUserInvitationPo.setDelFlag(BasePo.YesNo.N.name());
        return this.selectOne(wwdUserInvitationPo);
    }
}