package com.wwd.service.impl;

import com.feihua.framework.base.modules.dict.api.ApiBaseDictPoService;
import com.feihua.framework.base.modules.oss.cloud.api.ApiCloudStorageService;
import com.feihua.framework.constants.DictEnum;
import com.feihua.utils.calendar.CalendarUtils;
import com.feihua.utils.graphic.ImageUtils;
import com.feihua.utils.http.httpServletRequest.RequestUtils;
import com.feihua.utils.http.httpclient.HttpClientUtils;
import com.feihua.utils.io.StreamUtils;
import com.feihua.wechat.publicplatform.PublicUtils;
import com.feihua.wechat.publicplatform.dto.QrCodeTicketDto;
import com.github.pagehelper.Page;
import com.google.zxing.WriterException;
import com.wwd.service.modules.wwd.api.*;
import com.wwd.service.modules.wwd.dto.*;
import com.wwd.service.modules.wwd.po.WwdUserCardPo;
import com.wwd.service.modules.wwd.po.WwdUserParamQrcodePo;
import feihua.jdbc.api.pojo.BasePo;
import feihua.jdbc.api.pojo.PageResultDto;
import feihua.jdbc.api.service.impl.ApiBaseServiceImpl;
import feihua.jdbc.api.utils.OrderbyUtils;
import net.coobird.thumbnailator.Thumbnails;
import org.apache.commons.lang3.StringUtils;
import org.apache.http.HttpResponse;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.awt.*;
import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * This class was generated by MyBatis Generator.
 * @author yangwei 2018-11-01 10:44:36
 */
@Service
public class ApiWwdUserCardPoServiceImpl extends ApiBaseServiceImpl<WwdUserCardPo, WwdUserCardDto, String> implements ApiWwdUserCardPoService {
    @Autowired
    com.wwd.service.mapper.WwdUserCardPoMapper WwdUserCardPoMapper;

    @Autowired
    private ApiCloudStorageService apiCloudStorageService;
    @Autowired
    private ApiBaseDictPoService apiBaseDictPoService;
    @Autowired
    private ApiWwdUserTagPoService apiWwdUserTagPoService;

    @Autowired
    private ApiWwdUserPoService apiWwdUserPoService;
    @Autowired
    private ApiWwdUserPicPoService apiWwdUserPicPoService;
    @Autowired
    private ApiWwdUserAreaPoService apiWwdUserAreaPoService;
    @Autowired
    private ApiWwdUserParamQrcodePoService apiWwdUserParamQrcodePoService;

    public ApiWwdUserCardPoServiceImpl() {
        super(WwdUserCardDto.class);
    }

    @Override
    public PageResultDto<WwdUserCardDto> searchWwdUserCardsDsf(com.wwd.service.modules.wwd.dto.SearchWwdUserCardsConditionDto dto, feihua.jdbc.api.pojo.PageAndOrderbyParamDto pageAndOrderbyParamDto) {
        Page p = super.pageAndOrderbyStart(pageAndOrderbyParamDto);
        List<com.wwd.service.modules.wwd.dto.WwdUserCardDto> list = this.wrapDtos(WwdUserCardPoMapper.searchWwdUserCards(dto));
        return new PageResultDto(list, this.wrapPage(p));
    }

    @Override
    public WwdUserCardPo generateCard(GenerateCardParamDto generateCardParamDto) {
        WwdUserDto wwdUserDto = apiWwdUserPoService.selectByUserId(generateCardParamDto.getUserId());
        if (wwdUserDto == null) {
            return null;
        }else {
            // 获取图片
            Map<String,Object> ordery = new HashMap<>();
            ordery.put("orderby","create_at");
            ordery.put("orderable","true");

            List<WwdUserPicDto> userPicDtos = apiWwdUserPicPoService.selectByWwdUserId(wwdUserDto.getId(),OrderbyUtils.getOrderbyFromMap(ordery));
            Map<String, String> userPicMapMain = new HashMap<>();
            Map<String, String> userPicMapNormal = new HashMap<>();
            if (userPicDtos != null) {
                int putIndex = 1;
                for (int i = 0; i < userPicDtos.size(); i++) {
                    WwdUserPicDto picDto = userPicDtos.get(i);
                    if ("main".equals(picDto.getType())) {
                        userPicMapMain.put("main", picDto.getPicOriginUrl());
                    } else {
                        userPicMapNormal.put(putIndex + "", picDto.getPicOriginUrl());
                        putIndex++;
                    }
                }

                // 判断自定义,支持自定义图片

                List<String> mainSelect = generateCardParamDto.getMainPicSelectedIds();
                if (mainSelect != null && !mainSelect.isEmpty()) {
                    String mainPicId = mainSelect.get(0);
                    for (WwdUserPicDto userPicDto : userPicDtos) {
                        if (userPicDto.getId().equals(mainPicId)) {
                            userPicMapMain.put("main", userPicDto.getPicOriginUrl());
                        }
                    }
                }
                List<String> normalSelect = generateCardParamDto.getNormalPicSelectedIds();
                if (normalSelect != null && !normalSelect.isEmpty()) {
                    userPicMapNormal.clear();
                    putIndex = 1;
                    for (int i = 0; i < userPicDtos.size(); i++) {
                        for (String normalPicId : normalSelect) {
                            if (userPicDtos.get(i).getId().equals(normalPicId)){
                                userPicMapNormal.put(putIndex + "", userPicDtos.get(i).getPicOriginUrl());
                                putIndex++;
                                break;
                            }
                        }

                    }
                }

            }

            String wwdcardbgPath = RequestUtils.getRequest().getSession().getServletContext().getRealPath("") + File.separator + "WEB-INF" + File.separator + "wwdcardbg";
            String bgPath = "";
            Color textColor = null;
            if (DictEnum.Gender.female.name().equals(wwdUserDto.getGender())) {
                bgPath = wwdcardbgPath + File.separator + "female.png";
                textColor = new Color(0, 0, 0);
            } else {
                textColor = new Color(0, 0, 0);
                bgPath = wwdcardbgPath + File.separator + "male.png";
            }
            try {
                BufferedImage bgImage = ImageUtils.createImage(bgPath);
                // 添加图片
                // 主图
                String mainUrl = userPicMapMain.get("main");
                if (StringUtils.isNotEmpty(mainUrl)) {
                    BufferedImage pressImg = null;
                    try {
                        pressImg = ImageUtils.inputStreamToBufferedImage(download(mainUrl,true));
                    }catch (IllegalArgumentException e){
                        pressImg = ImageUtils.inputStreamToBufferedImage(download(mainUrl,false));
                    }
                    if (pressImg != null) {
                        int width = 280;
                        if (pressImg.getWidth() > width) {
                            pressImg = Thumbnails.of(pressImg).scale((new Double(width)).doubleValue() / (double) pressImg.getWidth()).asBufferedImage();
                        }
                        int height = 310;
                        if (pressImg.getHeight() > height) {
                            pressImg = ImageUtils.cutImage(pressImg, 0, (pressImg.getHeight() - height) / 2, pressImg.getWidth(), height);
                        }
                        ImageUtils.pressImage(bgImage, pressImg, 400, 150, 1.0f);
                    }
                }
                // 小图
                int imgY = 675;
                int imgX = 90;
                int height = 270;
                int normalcount = 0;
                for (String normalPicKey : userPicMapNormal.keySet()) {
                    if (normalcount >=3){
                        break;
                    }
                    String url = userPicMapNormal.get(normalPicKey);
                    if (StringUtils.isNotEmpty(url)) {
                        BufferedImage pressImg = null;
                        try {
                            pressImg = ImageUtils.inputStreamToBufferedImage(download(url,true));
                        }catch (IllegalArgumentException e){
                            pressImg = ImageUtils.inputStreamToBufferedImage(download(url,false));
                        }
                        if (pressImg == null) {
                            continue;
                        }
                        int width = 200;
                        if (pressImg.getWidth() > width) {

                            pressImg = Thumbnails.of(pressImg).scale((new Double(width)).doubleValue() / (double) pressImg.getWidth()).asBufferedImage();
                        }
                        if (pressImg.getHeight() > height) {
                            pressImg = ImageUtils.cutImage(pressImg, 0, (pressImg.getHeight() - height) / 2, pressImg.getWidth(), height);
                        }
                        ImageUtils.pressImage(bgImage, pressImg, imgX, imgY, 1.0f);
                        imgX += width + 30;
                        normalcount ++;
                    }


                }

                WwdUserAreaDto userAreaDto = apiWwdUserAreaPoService.selectByWwdUserId(wwdUserDto.getId());
                String now = "";
                String home = "";
                if (userAreaDto != null) {
                    now = StringUtils.stripToEmpty(userAreaDto.getNowProvinceName()) + " " + StringUtils.stripToEmpty(userAreaDto.getNowDistrictName());
                    home = StringUtils.stripToEmpty(userAreaDto.getHomeProvinceName()) + " " + StringUtils.stripToEmpty(userAreaDto.getHomeCityName());
                }
                List<WwdUserTagDto> userTagDtos = apiWwdUserTagPoService.selectByWwdUserId(wwdUserDto.getId());
                String hobbyType = "";
                if (userTagDtos != null) {
                    for (WwdUserTagDto userTagDto : userTagDtos) {
                        if ("hobby_type".equals(userTagDto.getType())) {
                            String content = StringUtils.stripToEmpty(userTagDto.getContent());
                            if (StringUtils.isNotEmpty(content)){
                                for (String item : content.split(",")) {
                                    String label = apiBaseDictPoService.selectDictLabel("hobby_type", item);
                                    if (StringUtils.isEmpty(label)){
                                        label = item;
                                    }
                                    hobbyType += label + " ";
                                }
                            }
                        }
                    }
                }

                int x = 100;
                int x_center = bgImage.getWidth() / 2 - 70;
                int y = 90;
                int titleFontSize = 20;
                int textFontSize = 16;
                int lineHeight = 30;
                bgImage = ImageUtils.pressText(bgImage, "个人介绍", "宋体", Font.BOLD, textColor, titleFontSize, x_center, y, 1);
                y = 120;
                bgImage = ImageUtils.pressText(bgImage, "昵称/微信：" + StringUtils.stripToEmpty(wwdUserDto.getName()), "宋体", Font.BOLD, textColor, textFontSize, x, y, 1);
                y += lineHeight;
                bgImage = ImageUtils.pressText(bgImage, "性别：" + StringUtils.stripToEmpty(apiBaseDictPoService.selectDictLabel("gender", wwdUserDto.getGender())), "宋体", Font.BOLD, textColor, textFontSize, x, y, 1);
                y += lineHeight;
                bgImage = ImageUtils.pressText(bgImage, "身高：" + StringUtils.stripToEmpty(wwdUserDto.getHeight()), "宋体", Font.BOLD, textColor, textFontSize, x, y, 1);
                y += lineHeight;
                bgImage = ImageUtils.pressText(bgImage, "体重：" + StringUtils.stripToEmpty(wwdUserDto.getWeight()), "宋体", Font.BOLD, textColor, textFontSize, x, y, 1);
                y += lineHeight;
                bgImage = ImageUtils.pressText(bgImage, "婚姻：" + StringUtils.stripToEmpty(apiBaseDictPoService.selectDictLabel("married_status", wwdUserDto.getMaritalStatus())), "宋体", Font.BOLD, textColor, textFontSize, x, y, 1);
                y += lineHeight;
                bgImage = ImageUtils.pressText(bgImage, "家乡在：" + home, "宋体", Font.BOLD, textColor, textFontSize, x, y, 1);
                y += lineHeight;
                bgImage = ImageUtils.pressText(bgImage, "目前在：" + now, "宋体", Font.BOLD, textColor, textFontSize, x, y, 1);
                y += lineHeight;
                bgImage = ImageUtils.pressText(bgImage, "生日：" + StringUtils.stripToEmpty(CalendarUtils.dateToString(wwdUserDto.getBirthDay())), "宋体", Font.BOLD, textColor, textFontSize, x, y, 1);
                y += lineHeight;
                bgImage = ImageUtils.pressText(bgImage, "学历：" + StringUtils.stripToEmpty(apiBaseDictPoService.selectDictLabel("education_level", wwdUserDto.getEducation())), "宋体", Font.BOLD, textColor, textFontSize, x, y, 1);
                y += lineHeight;
                String hourseCity = "";
                if (StringUtils.isNotEmpty(wwdUserDto.getHourseCity())){
                    hourseCity = "("+ wwdUserDto.getHourseCity() +")";
                }
                bgImage = ImageUtils.pressText(bgImage,
                        "房：" + StringUtils.stripToEmpty(apiBaseDictPoService.selectDictLabel("has_hourse_status", wwdUserDto.getHasHourse())) + hourseCity,
                        "宋体", Font.BOLD, textColor, textFontSize, x, y, 1);
                y += lineHeight;
                String carCity = "";
                if (StringUtils.isNotEmpty(wwdUserDto.getCarCity())){
                    carCity = "("+ wwdUserDto.getCarCity() +")";
                }
                bgImage = ImageUtils.pressText(bgImage,
                        "车：" + StringUtils.stripToEmpty(apiBaseDictPoService.selectDictLabel("has_car_status", wwdUserDto.getHasCar())) + carCity,
                        "宋体", Font.BOLD, textColor, textFontSize, x, y, 1);
                y += lineHeight;
                bgImage = ImageUtils.pressText(bgImage, "抽烟：" + StringUtils.stripToEmpty(apiBaseDictPoService.selectDictLabel("smoking_status", wwdUserDto.getSmoking())), "宋体", Font.BOLD, textColor, textFontSize, x, y, 1);
                y += lineHeight;
                bgImage = ImageUtils.pressText(bgImage, "喝酒：" + StringUtils.stripToEmpty(apiBaseDictPoService.selectDictLabel("drinking_status", wwdUserDto.getDrinking())), "宋体", Font.BOLD, textColor, textFontSize, x, y, 1);
                y += lineHeight;
                bgImage = ImageUtils.pressText(bgImage, "标签信息：" + hobbyType, "宋体", Font.BOLD, textColor, textFontSize, x, y, 1);
                String _description = "补充介绍：" + StringUtils.stripToEmpty(wwdUserDto.getDescription());
                int descriptionLength = _description.length();

                String lineDescription = "";
                for (int i = 0; i < descriptionLength; i++) {
                    lineDescription += _description.charAt(i);
                    if (lineDescription.length() == 38 || i + 1 == descriptionLength) {
                        y += lineHeight;
                        bgImage = ImageUtils.pressText(bgImage, lineDescription, "宋体", Font.BOLD, textColor, textFontSize, x, y, 1);
                        lineDescription = "";
                    }
                }

                y = 970;
                bgImage = ImageUtils.pressText(bgImage, "择偶标准/理想类型", "宋体", Font.BOLD, textColor, titleFontSize, x_center, y, 1);
                y += 30;
                lineDescription = "";
                String _stardard = "  " + StringUtils.stripToEmpty(wwdUserDto.getStandard());
                descriptionLength = _stardard.length();
                for (int i = 0; i < descriptionLength; i++) {
                    lineDescription += _stardard.charAt(i);
                    if (lineDescription.length() == 38 || i + 1 == descriptionLength) {
                        y += lineHeight;
                        bgImage = ImageUtils.pressText(bgImage, StringUtils.stripToEmpty(lineDescription), "宋体", Font.BOLD, textColor, textFontSize, x, y, 1);
                        lineDescription = "";
                    }
                }

                // 现在使用永久二维码
                WwdUserParamQrcodePo paramQrcodePo = apiWwdUserParamQrcodePoService.selectByWwdUserIdAndIsLimit(wwdUserDto.getId(),BasePo.YesNo.Y);
                if (paramQrcodePo == null) {
                    //生成微信带参数二维码，以关注公众帐号
                    QrCodeTicketDto qrCodeTicketDto = PublicUtils.createQrCodeLimit(generateCardParamDto.getSceneStr(),generateCardParamDto.getWhich());
                    if (qrCodeTicketDto != null) {
                        WwdUserParamQrcodePo paramQrcodePo1 = new WwdUserParamQrcodePo();
                        paramQrcodePo1.setWwdUserId(wwdUserDto.getId());
                        paramQrcodePo1.setTicket(qrCodeTicketDto.getTicket());
                        paramQrcodePo1.setExpireSeconds(qrCodeTicketDto.getExpireSeconds());
                        paramQrcodePo1.setContent(qrCodeTicketDto.getUrl());
                        paramQrcodePo1.setIsLimit(BasePo.YesNo.Y.name());
                        paramQrcodePo1 = apiWwdUserParamQrcodePoService.preInsert(paramQrcodePo1,generateCardParamDto.getCurrentUserId());
                        paramQrcodePo = apiWwdUserParamQrcodePoService.insertSimple(paramQrcodePo1);
                    }
                }

                // 自己生成带参数的二维码
                int margin = 50;
                int footheight = 150;
                try {
                    BufferedImage logo = ImageUtils.createImage(wwdcardbgPath + File.separator + "logo.png");
                    BufferedImage templogo = ImageUtils.zoomEqualRatioImageByWidth(logo,40);
                    BufferedImage qrcode = ImageUtils.createQrCodeWithLogo(footheight,
                            paramQrcodePo.getContent(),
                            "utf-8",0,
                            Color.white, Color.BLACK, templogo);

                    ImageUtils.pressImage(bgImage,qrcode,bgImage.getWidth() - qrcode.getWidth() - margin,bgImage.getHeight() - qrcode.getHeight() - margin,1.0f);

                    // 添加logo
                    logo = ImageUtils.createImage(wwdcardbgPath + File.separator + "logo-mini.png");
                    ImageUtils.pressImage(bgImage,logo,margin,bgImage.getHeight() - logo.getHeight() - margin,1.0f);

                    // 中间文字
                    String word = "• 缘 分 从 这 一 刻 开 始 •";
                    int fontSize = 26;
                    int _height = bgImage.getHeight() - (margin + footheight)/2 - fontSize/2 - 25;
                            bgImage = ImageUtils.pressText(bgImage, word, "宋体", Font.BOLD, textColor,
                            fontSize,
                            bgImage.getWidth()/2 - (8 * fontSize  +  fontSize * 11/2)/2,// 8个中文字符11个英语字符
                                    _height,
                            1);
                    word = "扫码进入公众号  相识更多单身男生女生";
                    int _fontSize = 17;

                    bgImage = ImageUtils.pressText(bgImage, word, "宋体", Font.PLAIN, textColor,
                            _fontSize,
                            bgImage.getWidth()/2 - (18 * _fontSize )/2 + 10,// 77个中文字符2个英语字符=18个中文
                            _height + _fontSize + 20,
                            1);

                } catch (WriterException e) {
                    logger.error(e.getMessage(),e);
                }

                String resultPath = apiCloudStorageService.uploadSuffix(ImageUtils.bufferedImageToInputStream(bgImage, "png"),"/wwdcard",".png");
                // 判断是否已存在，
                WwdUserCardPo userCardPodb =  selectByWwdUserId(wwdUserDto.getId());
                if (userCardPodb != null) {
                    // 更新
                    userCardPodb.setPicOriginUrl(resultPath);
                    this.updateByPrimaryKeySelective(userCardPodb);
                }else {
                    //直接添加
                    userCardPodb = new WwdUserCardPo();
                    userCardPodb.setPicOriginUrl(resultPath);
                    userCardPodb.setWwdUserId(wwdUserDto.getId());
                    this.preInsert(userCardPodb,generateCardParamDto.getCurrentUserId());
                    this.insertSelective(userCardPodb);
                }
            } catch (IOException e) {
                logger.error(e.getMessage(), e);
            }
            return this.selectByWwdUserId(wwdUserDto.getId());
        }
    }

    @Override
    public WwdUserCardPo selectByWwdUserId(String wwdUserId) {
        WwdUserCardPo wwdUserCardPo = new WwdUserCardPo();
        wwdUserCardPo.setWwdUserId(wwdUserId);
        wwdUserCardPo.setDelFlag(BasePo.YesNo.N.name());
        return this.selectOneSimple(wwdUserCardPo);
    }

    @Override
    public WwdUserCardDto wrapDto(WwdUserCardPo po) {
        if (po == null) {
            return null;
        }
        WwdUserCardDto wwdUserCardDto = new WwdUserCardDto();
        wwdUserCardDto.setSequence(po.getSequence());
        wwdUserCardDto.setDescribtion(po.getDescribtion());
        wwdUserCardDto.setPicOriginUrl(po.getPicOriginUrl());
        wwdUserCardDto.setPicThumbUrl(po.getPicThumbUrl());
        wwdUserCardDto.setType(po.getType());
        wwdUserCardDto.setDataOfficeId(po.getDataOfficeId());
        wwdUserCardDto.setDataUserId(po.getDataUserId());
        wwdUserCardDto.setDataAreaId(po.getDataAreaId());
        wwdUserCardDto.setId(po.getId());
        wwdUserCardDto.setUpdateAt(po.getUpdateAt());
        wwdUserCardDto.setDataType(po.getDataType());
        return super.wrapDto(po);
    }

    private ByteArrayInputStream download(String url,boolean userParam) throws IOException {
        HttpClient client = HttpClientUtils.getClient();
        String _url = url;
        if (userParam) {
            _url += "?x-oss-process=image/auto-orient,1";
        }
        HttpGet get = new HttpGet(_url);

        HttpResponse httpResponse =  client.execute(get);
        InputStream inputStream = httpResponse.getEntity().getContent();

        return StreamUtils.inputStreamToByteArrayInputStream(inputStream);
    }
}